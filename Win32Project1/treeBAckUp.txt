#pragma once



class Tree {
	struct List
	{
		int x, y;							//Координаты вывода
		int value;							//информационный элемент
		struct List *left;					//Левая ветвь
		struct List *right;					//Правая ветвь
		UINT level;							//Уровень листа		
		short int balance;					//Показатель баланса
	};
	UINT maxLevel;
	struct List *head;						//семечко дерева
	int X, Y;								//Позиция "роста" дерева
	int width, hight;						//Радиус листов элемента(Для функции рисования)
	int distance;
public: std::vector<int> elements;
public:
	class NullException {					//Класс исключения: Пустое дерево
		TCHAR GetError() { TCHAR Error[22]; lstrcpy(Error, _T("Error: дерево пустое")); return *Error; }
	};
	class NotFoundException {				//Класс исключения: Элемент не найден
		TCHAR GetError() { TCHAR Error[26]; lstrcpy(Error, _T("Error: элемент не найден")); return *Error; }
	};
	Tree()
	{								//Конструктор без параметров
		head = NULL;						//Инициализация семечка дерева пустым адрессом  
		Y = 10;								//Первоначальная позиция Y
		width = 40;							//Задаем диаметр
		hight = 40;							//листов 
		maxLevel = 1;
		distance = 45;
	}
	POINT getResolutionOfNode() {
		POINT res = { width, hight };
		return res;
	}
	void setX(int x);
	void offsetXY(int offsetX, int offsetY);
	void offsetXY(List* cur, int offsetX, int offsetY);
	void GiveX(int x){ X = x; }				//Центрирование дерева на экране
	bool CheckIfEmpty() {if (head == NULL) { throw Tree::NullException(); return 1; } else return 0;}	//Проверка дерева на пустоту
	bool CheckIfEmpty(bool a) { if (head == NULL) { return 1; } else return 0; }	//Проверка дерева на пустоту
	void Add(int value, bool checkRot);					//Добавление элемента в дерево
	void Show(HWND hWnd, HDC &hdc);			//Демонстрация дерева
	void Show(HWND hWnd, float x, float y);
	void Delete(int value);					//Удаление элемента
	void deleteAll(List* cur);
	void deleteAll();
	void GoStepByStep(List* curPrev, List* cur, HWND hWnd, HDC &hdc);	//Рекурсивная функция показа листов дерева
	void GoStepByStep(List* curPrev, List* cur, Graphics g);	//Рекурсивная функция показа листов дерева
	void SetLevels(List* curPrev, List* cur);//Рекурсивная функция расстоновки уровней
	void RefreshXY(List* curPrev, List* cur); //Выравнивание листов дерева соответственно уровню
	void setBalance(List* cur, List* curPrev);
	void checkRotation(List* cur, List* curPrev);
	void leftRotation(List* cur, List* curPrev);
	void rightRotation(List* cur, List* curPrev);
	void bigLeftRightRot(List* unstableCur);
	void bigRightLeftRot(List* unstableCur);
	void makeXWider(List* cur, int multiplier);
	void getAllElements();
	void fillVec(List *cur);
	struct List* getEdgeRightNode();
	struct List* getEdgeLeftNode();
	POINT getNodeXY(List* cur)
	{
		POINT xy = { cur->x, cur->y };
		return xy;
	}
	//void saveTree();
	List* getHead() { return head; }
	struct List* findUnstableNode(List* underNode);
};

void Tree::Show(HWND hWnd, float x, float y)
{
	HDC hdc = GetDC(hWnd);
	// Все строки - в кодировке Unicode
	WCHAR welcome[] = L"Добавьте элемент в дерево";

	// Создаем контекст рисования и устанавливаем 
	// пиксельную систему координат
	Graphics g(hdc);
	g.SetPageUnit(UnitPixel);
	RectF bounds(0, 0, x, y);

	// Загружаем фоновое изображение и растягиваем его на все окно
	Image bg(L"BACKGRND.gif");
	g.DrawImage(&bg, bounds);

	// Создаем кисть с градиентом на все окно и полупрозрачностью
	LinearGradientBrush brush(bounds, Color(130, 255, 0, 0), Color(255, 0, 0, 255),
		LinearGradientModeBackwardDiagonal);

	// Готовим формат и параметры шрифта
	StringFormat format;
	format.SetAlignment(StringAlignmentCenter);
	format.SetLineAlignment(StringAlignmentCenter);
	Font font(L"Arial", 48, FontStyleBold);

	// Выводим текст приветствия, длина -1 означает, 
	// что строка заканчивается нулем
	g.DrawString(welcome, -1, &font, bounds, &format, &brush);
	ReleaseDC(hWnd, hdc);
}


void Tree::offsetXY(int offsetX, int offsetY)
{
	if (head)
	{
		X += offsetX;
		Y += offsetY;
		head->x += offsetX;
		head->y += offsetY;
		if (head->right) offsetXY(head->right, offsetX, offsetY);
		if (head->left) offsetXY(head->left, offsetX, offsetY);
	}
}

void Tree::offsetXY(List* cur,int offsetX, int offsetY)
{
	cur->x += offsetX;
	cur->y += offsetY;

	if (cur->right) offsetXY(cur->right, offsetX, offsetY);
	if (cur->left) offsetXY(cur->left, offsetX, offsetY);
}

void Tree::getAllElements()
{
	if (!elements.empty()) elements.clear();
	fillVec(head);
}

void Tree::fillVec(List* cur)
{
	elements.push_back(cur->value);
	if (cur->left) fillVec(cur->left);
	if (cur->right) fillVec(cur->right);
}

void Tree::Add(int value, bool checkRot) {
	
		if (head == NULL)
		{
			head = new List; //Закладываем семечко
			head->level = 1;
			head->value = value;
			head->x = X;
			head->y = Y;
			head->left = NULL;
			head->right = NULL;
			setBalance(head, head);
		}
		else
		{
			List *cur = head;
			List *curPrev = head;
			List *curPrevPrev = head;
			while (true)
			{
				if (value < cur->value)
				{
					curPrevPrev = curPrev;
					curPrev = cur;
					cur = cur->left;
				}
				else
				{
					curPrevPrev = curPrev;
					curPrev = cur;
					cur = cur->right;
				}

				if (!cur)
				{
					cur = new List;
					cur->level = 1;
					cur->y = curPrev->y + distance;
;
					if (value < curPrev->value)
					{
						curPrev->left = cur;
					}
					else
					{
						curPrev->right = cur;
					}
					break;
				}
			}
			
			cur->value = value;
			cur->left = NULL;
			cur->right = NULL;
			SetLevels(head, head);
			makeXWider(head, head->level-1);
			setBalance(head, head);
			if(checkRot) checkRotation(head, head);
			maxLevel = head->level;
	}
}

void Tree::SetLevels(List *curPrev, List *cur)
{

	if (cur->right)
		SetLevels(cur, cur->right);
	if (cur->left)
		SetLevels(cur, cur->left);

		
		
		if (!cur->right && !cur->left)
		{
			cur->level = 1;
		}
		else if (cur->right && !cur->left)
		{
			cur->level = cur->right->level + 1;
		}
		else if (!cur->right && cur->left)
		{
			
			cur->level = cur->left->level + 1;
		}
		else if (cur->right && cur->left)
		{
			if (cur->right->level >= cur->left->level)
			{
				cur->level = cur->right->level + 1;
			}
			else
			{
				cur->level = cur->left->level + 1;
			}
		}


	//}


	/*if (cur == head)
	{
		if(cur->left && cur->right)
		if (cur->left->level >= cur->right->level)
		{
			cur->level = cur->left->level + 1;
		}
		else
		{
			cur->level = cur->right->level + 1;
		}
	}*/
	/*if (curPrev->level - cur->level >= 2)
	curPrev->level--;*/
}

void Tree::Show(HWND hWnd, HDC &hdc) {
	hdc = GetDC(hWnd);
	
	if (!head) 
	{
		SetBkColor(hdc, RGB(10, 10, 10));
		SetTextColor(hdc, RGB(155, 45, 10));
		TextOut(hdc, X-31*3, Y, _T("Добавьте элемент в дерево"), 25);
	}
	else 
	{
		GoStepByStep(head, head, hWnd, hdc);
	}
	ReleaseDC(hWnd,hdc);
}



void Tree::GoStepByStep(List *curPrev, List *cur,HWND hWnd, HDC &hdc) 
{
	if (cur!=NULL || curPrev!=NULL) 
	{
		HPEN pen = CreatePen(PS_SOLID, 1,RGB(130, 130, 130));
		SelectObject(hdc, pen);
		MoveToEx(hdc, curPrev->x + width/2.1, curPrev->y + hight, NULL);
		LineTo(hdc, cur->x + width / 3, cur->y + hight / 4);
		DeleteObject(pen);
		HBRUSH hBrush = CreateSolidBrush(RGB(139, 0, 0));
		HRGN hRgnEllipse = CreateEllipticRgn(cur->x, cur->y, cur->x+width, cur->y+hight);
		FillRgn(hdc, hRgnEllipse, hBrush);
		DeleteObject(hRgnEllipse);
		DeleteObject(hBrush);
		hBrush = CreateSolidBrush(RGB(155, 45, 48));
		hRgnEllipse = CreateEllipticRgn(cur->x+4, cur->y+4, cur->x + width-4, cur->y + hight-4);
		FillRgn(hdc, hRgnEllipse, hBrush);
		DeleteObject(hRgnEllipse);
		DeleteObject(hBrush);
		TCHAR value[10];
		_stprintf(value, _T("%d"), cur->value);
		SetTextColor(hdc, RGB(255, 255, 255));
		SetBkColor(hdc, RGB(155, 45, 48));
		TextOut(hdc, cur->x+width/3, cur->y+hight/4, value, _tcslen(value));

		_stprintf(value, _T("%d"), cur->balance);
		if (curPrev->left == cur || cur == head)
		{
			TextOut(hdc, (cur->x + width / 3) - 10, (cur->y + hight / 4) - 5, value, _tcslen(value));
		}
		else if (curPrev->right == cur)
		{
			TextOut(hdc, (cur->x + width / 3) + 20, (cur->y + hight / 4) - 5, value, _tcslen(value));
		}
		_stprintf(value, _T("%d"), cur->level);
		SetTextColor(hdc, RGB(255, 0, 255));
		SetBkColor(hdc, RGB(155, 45, 48));
		if (curPrev->left == cur || cur == head)
		{
			TextOut(hdc, (cur->x + width / 3) + 20, (cur->y + hight / 4) - 5, value, _tcslen(value));
		}
		else if (curPrev->right == cur)
		{
			TextOut(hdc, (cur->x + width / 3) - 10, (cur->y + hight / 4) - 5, value, _tcslen(value));
		}
		if (cur->left!=NULL) 
		GoStepByStep(cur, cur->left,hWnd, hdc);
		if (cur->right != NULL)
		GoStepByStep(cur, cur->right,hWnd, hdc);
	}
}

void Tree::Delete(int value)
{
	if (head == NULL)	throw Tree::NullException();
	else
	{
		List *key = head;
		List *curPrev = key;
		while (key)
		{
			if (value < key->value)
			{
				curPrev = key;
				key = key->left;
			}
			else if (value > key->value)
			{
				curPrev = key;
				key = key->right;
			}
			else if (value == key->value) break;
		}
		if (!key)  throw Tree::NotFoundException();
		else 
		{
			if (!key->right && !key->left)
			{
				
				if (key == curPrev->left) 
				{
					 curPrev->left = NULL;
				}
				else if (key == curPrev->right)
				{
					curPrev->right = NULL;
				}
				if (key == head) head = NULL;
				delete key;
				key = head;
				while (key)
				{
					if (value < key->value)
					{
						if(key->level > 1) key->level--;
						key = key->left;
					}
					else if (value > key->value)
					{
						if (key->level > 1) key->level--;
						key = key->right;
					}
				}
			}
			else if ((key->right && !key->left) || (!key->right && key->left))
			{
				if (key->right)
				{
					if (key == head)
					{
						head = key->right;
					}
					else 
					{
						if (curPrev->right == key)
						{
							curPrev->right = key->right;
						}
						if (curPrev->left == key)
						{
							curPrev->left = key->right;
						}
					}
				}	
				else
				{
					if (key == head)
					{
						head = key->left;
					}
					else
					{
						if (curPrev->right == key)
						{
							curPrev->right = key->left;
						}
						if (curPrev->left == key)
						{
							curPrev->left = key->left;
						}
					}
					curPrev->level--;
				}
				delete key;
			}
			else if (key->right && key->left)
			{
				List *cur = key->right;
				if (!cur->left)
				{
					if (key != head)
					{
						List *buffer = key->left;
						if (key == curPrev->left) 
						{
							curPrev->left = cur;
						}
						else if (key == curPrev->right) 
						{
							curPrev->right = cur;
						}
						cur->x = key->x;
						cur->y = key->y;
						cur->left = buffer;
						delete key;
					}
					else 
					{
						key->value = cur->value;
						key->right = cur->right;
						delete cur;
					}
				}
				else
				{

					while (cur->left) {
						curPrev = cur;
						cur = cur->left;
					}
					if (cur->right)
					{
						curPrev->left = cur->right;
					}
					else
					{
						curPrev->left = NULL;
					}
					key->value = cur->value;
					delete cur;
				}
			}
		}
		if (head)
		{
			SetLevels(head, head);
			setBalance(head, head);
			checkRotation(head, head);
			maxLevel = head->level;
			Tree::RefreshXY(head, head);
			makeXWider(head, head->level);
		}
	}
}

void Tree::RefreshXY(List *curPrev, List*cur)
{
	if (head)
	{
		if (cur == head)
		{
			head->x = X;
			head->y = Y;
		}
		if (cur)
		{
			if (curPrev != cur)
			{

				if (curPrev->y + hight != cur->y)
				{
					cur->y = curPrev->y + hight;
					if (curPrev->right == cur)
					{
						if (curPrev == head) cur->x = curPrev->x + 150;
						else cur->x = curPrev->x + 25;
					}
					if (curPrev->left == cur)
					{
						if (curPrev == head) cur->x = curPrev->x - 150;
						else cur->x = curPrev->x - 25;
					}
				}
			}
		}
		if (cur->right)
			RefreshXY(cur, cur->right);
		if (cur->left)
			RefreshXY(cur, cur->left);
	}
}

void Tree::setBalance(List *cur, List *curPrev)
{
	if (cur->left != NULL) setBalance(cur->left, cur);
	if (cur->right != NULL) setBalance(cur->right, cur);

	if (cur->right == NULL && cur->left == NULL) cur->balance = 0;
	else if (cur->right == NULL  && cur->left != NULL) cur->balance = -1;
	else if (cur->right != NULL  && cur->left == NULL) cur->balance = 1;
	else 
	{ 
		cur->balance = cur->right->level - cur->left->level; 
	}
	if (curPrev == head)
	{
		
		if (!curPrev->left && curPrev->right)
		{
			if (curPrev->right->right || curPrev->right->left)
			{
				curPrev->balance = 2;
			}
		}
		else if (curPrev->left && !curPrev->right)
		{
			if (curPrev->left->right || curPrev->left->left)
			{
				curPrev->balance = -2;
			}
		}
	}
	
}

void Tree::checkRotation(List* cur, List* curPrev)
{
	if (head->balance == -2) rightRotation(head, head);
	else if (head->balance == 2) leftRotation(head, head);
	if (head->balance == -2)
	{
		rightRotation(head, head);
		bigRightLeftRot(findUnstableNode(head->right));
		leftRotation(head, head);
	}
	else if (head->balance == 2) 
	{
		leftRotation(head, head);
		bigLeftRightRot(findUnstableNode(head->left));
		rightRotation(head, head);
	}
	SetLevels(head, head);
	maxLevel = head->level;
	setBalance(head, head);
	RefreshXY(head, head);
	makeXWider(head, head->level);

	
}

void Tree::rightRotation(List* cur, List* curPrev)
{
	List *buf;
	if (cur == head)
	{
		buf = head;
		head = buf->left;
		int bufx = head->x;
		int bufy = head->y;
		head->x = buf->x;
		head->y = buf->y;
		RefreshXY(head, head);
		buf->left = head->right;
		head->right = buf;
	}
	SetLevels(head, head);
	maxLevel = head->level;
	setBalance(head, head);
	RefreshXY(head, head);
	makeXWider(head, head->level);
}

void Tree::leftRotation(List *cur, List* curPrev)
{
	List *buf;
	if (cur == head)
	{
		buf = head;
		head = buf->right;
		int bufx = head->x;
		int bufy = head->y;
		head->x = buf->x;
		head->y = buf->y;
		RefreshXY(head, head);
		buf->right = head->left;
		head->left = buf;
	}
	SetLevels(head, head);
	maxLevel = head->level;
	setBalance(head, head);
	RefreshXY(head, head);
	makeXWider(head, head->level);
}

void Tree::makeXWider(List* cur, int multiplier)
{
	int buf = 1;
	for (int i = multiplier-1; i > 0; i--)
	{
		buf *= i;
	}


	if (cur->right) 
	{ 
		cur->right->x = (cur->x + width * buf); 
		cur->right->y = cur->y + distance;
	}
	if (cur->left)
	{
		cur->left->x = (cur->x - width * buf);
		cur->left->y = cur->y + distance;
	}
		
	if (cur->right) makeXWider(cur->right, multiplier-1);
	if (cur->left) makeXWider(cur->left, multiplier-1);
}

void Tree::bigLeftRightRot(List* unstableCur)
{
	List *buf;
	List* curPrev = unstableCur;
	unstableCur = unstableCur->right;
	if (curPrev->balance == 1)
	{
		buf = unstableCur->left;
		unstableCur->left = curPrev;
		curPrev->right = buf;
		head->left = unstableCur;
	}
	SetLevels(head, head);
	maxLevel = head->level;
	setBalance(head, head);
	RefreshXY(head, head);
	makeXWider(head, head->level);
}

void Tree::bigRightLeftRot(List* unstableCur)
{
	List *buf;
	List* curPrev = unstableCur;
	unstableCur = unstableCur->left;
	if (curPrev->balance == -1)
	{
		buf = unstableCur->right;
		unstableCur->right = curPrev;
		curPrev->left = buf;
		head->right = unstableCur;
	}
	SetLevels(head, head);
	maxLevel = head->level;
	setBalance(head, head);
	RefreshXY(head, head);
	makeXWider(head, head->level);
}

Tree::List* Tree::findUnstableNode(List* underNode)
{
	List* cur = underNode;
	List* curPrev = cur;
	List* curPrevPrev = cur;
	while (cur->balance != 0)
	{
		curPrevPrev = curPrev;
		curPrev = cur;
		if (cur->balance == 1) cur = cur->right;
		else if (cur->balance == -1) cur = cur->left;
	}
	return curPrevPrev;
}

void Tree::deleteAll() { if(head)deleteAll(head); }

void Tree::deleteAll(List* cur)
{
	
		if (cur->left) deleteAll(cur->left);
		if (cur->right) deleteAll(cur->right);

		if (cur == head) head = NULL;
		delete cur;
		cur = NULL;
	
}

Tree::List* Tree::getEdgeRightNode()
{
	if (head)
	{
		List* cur = head;
		while (cur->right || cur->left)
		{
			if (cur->right) cur = cur->right;
			else if (cur->left) cur = cur->left;
		}
		return cur;
	}
	else return nullptr;
}

Tree::List* Tree::getEdgeLeftNode()
{
	if (head)
	{
		List* cur = head;
		while (cur->right || cur->left)
		{
			if (cur->left) cur = cur->left;
			else if (cur->right) cur = cur->right;
		}
		return cur;
	}
	else return nullptr;
}

void Tree::setX(int x)
{
	if (head)
	{
		head->x = x;
		head->y = Y;
	}
	makeXWider(head, head->level);
}

